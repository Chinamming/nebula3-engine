<?xml version="1.0" encoding="utf-8"?>
<Nebula3>
    <Protocol namespace="Graphics" name="GraphicsProtocol">
        <!-- dependencies -->
        <Dependency header="util/stringatom.h"/>
        <Dependency header="util/variant.h"/>
        <Dependency header="core/rtti.h"/>
        <Dependency header="coregraphics/displaymode.h"/>
        <Dependency header="coregraphics/adapter.h"/>
        <Dependency header="coregraphics/antialiasquality.h"/>
        <Dependency header="coregraphics/pixelformat.h"/>
        <Dependency header="coregraphics/adapterinfo.h"/>
        <Dependency header="coregraphics/threadsafedisplayeventhandler.h"/>
        <Dependency header="coregraphics/threadsaferendereventhandler.h"/>
        <Dependency header="internalgraphics/attachmentserver.h"/>
        <Dependency header="internalgraphics/internalgraphicsentity.h"/>
        <Dependency header="visibility/visibilitysystems/visibilitysystembase.h"/>
        <Dependency header="resources/resourceid.h"/>
        <Dependency header="math/matrix44.h"/>
        <Dependency header="math/float4.h"/>
        <Dependency header="math/quaternion.h"/>
        <Dependency header="math/clipstatus.h"/>
        <Dependency header="threading/objectref.h"/>
        <Dependency header="timing/time.h"/>
        <Dependency header="animation/animeventhandlerbase.h"/>
        <Dependency header="coregraphics/mousepointer.h"/>
        <Dependency header="resources/resourcemapper.h"/>
        <Dependency header="shared/graphics/camerasettings.h"/>
        <Dependency header="animation/animjobenqueuemode.h"/>
        
        <!-- register a render-thread plugin -->
        <Message name="RegisterRTPlugin" fourcc="rrtp">
            <InArg name="Type" type="const Core::Rtti*"/>
        </Message>
        
        <!-- unregister a render-thread plugin -->
        <Message name="UnregisterRTPlugin" fourcc="urtp">
            <InArg name="Type" type="const Core::Rtti*"/>
        </Message>
        
        <!-- setup the asynchronous graphics runtime -->
        <Message name="SetupGraphics" fourcc="supg">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <InArg name="DisplayMode" type="CoreGraphics::DisplayMode"/>
            <InArg name="AntiAliasQuality" type="CoreGraphics::AntiAliasQuality::Code"/>
            <InArg name="Fullscreen" type="bool"/>
            <InArg name="DisplayModeSwitchEnabled" type="bool"/>
            <InArg name="TripleBufferingEnabled" type="bool"/>
            <InArg name="AlwaysOnTop" type="bool"/>
            <InArg name="VerticalSyncEnabled" type="bool"/>
            <InArg name="IconName" type="Util::String"/>
            <InArg name="WindowTitle" type="Util::String"/>
            <InArg name="ParentWindow" type="void*"/>
            <InArg name="ResourceMappers" type="Util::Array<Ptr<Resources::ResourceMapper> >"/>
            <OutArg name="Success" type="bool"/>
            <OutArg name="ActualDisplayMode" type="CoreGraphics::DisplayMode"/>
            <OutArg name="ActualFullscreen" type="bool"/>
            <OutArg name="ActualAdapter" type="CoreGraphics::Adapter::Code"/>
        </Message>
        
        <!-- test if adapter exists -->
        <Message name="AdapterExists" fourcc="aext">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <OutArg name="Result" type="bool"/>
        </Message>
            
        <!-- get available display modes -->
        <Message name="GetAvailableDisplayModes" fourcc="gadm">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <InArg name="PixelFormat" type="CoreGraphics::PixelFormat::Code"/>
            <OutArg name="Result" type="Util::Array<CoreGraphics::DisplayMode>"/>
        </Message>
        
        <!-- check if a display mode is supported -->
        <Message name="SupportsDisplayMode" fourcc="spdm">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <InArg name="DisplayMode" type="CoreGraphics::DisplayMode"/>
            <OutArg name="Result" type="bool"/>
        </Message>
        
        <!-- get current adapter display mode -->
        <Message name="GetCurrentAdapterDisplayMode" fourcc="gcdm">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <OutArg name="Result" type="CoreGraphics::DisplayMode"/>
        </Message>
        
        <!-- get adapter info -->
        <Message name="GetAdapterInfo" fourcc="gadi">
            <InArg name="Adapter" type="CoreGraphics::Adapter::Code"/>
            <OutArg name="Result" type="CoreGraphics::AdapterInfo"/>
        </Message>
        
        <!-- attach a thread-safe display event handler -->
        <Message name="AttachDisplayEventHandler" fourcc="adeh">
            <InArg name="Handler" type="Ptr<CoreGraphics::ThreadSafeDisplayEventHandler>"/>
        </Message>
        
        <!-- remove a thread-safe display event handler -->
        <Message name="RemoveDisplayEventHandler" fourcc="rdeh">
            <InArg name="Handler" type="Ptr<CoreGraphics::ThreadSafeDisplayEventHandler>"/>            
        </Message>
        
        <!-- attach a thread-safe render event handler -->
        <Message name="AttachRenderEventHandler" fourcc="areh">
            <InArg name="Handler" type="Ptr<CoreGraphics::ThreadSafeRenderEventHandler>"/>
        </Message>
            
        <!-- remove a thread-safe render event handler -->
        <Message name="RemoveRenderEventHandler" fourcc="rreh">
            <InArg name="Handler" type="Ptr<CoreGraphics::ThreadSafeRenderEventHandler>"/>
        </Message>
        
        <!-- create a graphics stage -->
        <Message name="CreateGraphicsStage" fourcc="cgst">
            <InArg name="Name" type="Util::StringAtom"/>
            <InArg name="VisibleSystems" type="Util::Array<Ptr<Visibility::VisibilitySystemBase> >"/>
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>
        
        <!--- discard a graphics stage -->
        <Message name="DiscardGraphicsStage" fourcc="digs">
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>
                    
        <!-- create a graphics view -->
        <Message name="CreateGraphicsView" fourcc="cgvw">
            <InArg name="ViewClass" type="const Core::Rtti*" default="0"/>
            <InArg name="Name" type="Util::StringAtom"/>
            <InArg name="StageName" type="Util::StringAtom"/>
            <InArg name="FrameShaderName" type="Resources::ResourceId"/>
            <InArg name="DefaultView" type="bool" default="false"/>
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>
        
        <!-- discard a graphics view -->
        <Message name="DiscardGraphicsView" fourcc="dgvw">
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>

        <!-- sets the default graphics view -->
        <Message name="SetDefaultGraphicsView" fourcc="sgvw">
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>
        
        <!-- base class for graphics entity creation -->
        <Message name="CreateGraphicsEntity" fourcc="cget">
            <InArg name="StageName" type="Util::StringAtom"/>
            <InArg name="Transform" type="Math::matrix44"/>
            <InArg name="Visible" type="bool" default="true"/>
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
            <InArg name="SharedData" type="Ptr<FrameSync::FrameSyncSharedData>"/>
        </Message>

        <!-- create a ModelEntity -->
        <Message name="CreateModelEntity" fourcc="cmde" derivedFrom="CreateGraphicsEntity">
            <InArg name="ResourceId" type="Resources::ResourceId"/>
            <InArg name="RootNodePath" type="Util::StringAtom"/>
            <InArg name="RootNodeOffsetMatrix" type="Math::matrix44"/>
            <InArg name="AnimDrivenMotionEnabled" type="bool" default="false"/>
            <InArg name="AnimDrivenMotionJointName" type="Util::StringAtom"/>
            <InArg name="AnimEventsEnabled" type="bool" default="false"/>
            <InArg name="AnimEventsOnlyDominatingClip" type="bool" default="true"/>
            <InArg name="CharJointTrackingEnabled" type="bool" default="false"/>
            <InArg name="TrackedCharJointNames" type="Util::Array<Util::StringAtom>" />
        </Message>            

        <!-- create a CameraEntity with perspective fov -->
        <Message name="CreateCameraEntity" fourcc="cpce" derivedFrom="CreateGraphicsEntity">
            <InArg name="CameraSettings" type="Shared::CameraSettings"/>
        </Message>
        
        <!-- create a global light entity -->
        <Message name="CreateGlobalLightEntity" fourcc="cgle" derivedFrom="CreateGraphicsEntity">
            <InArg name="LightColor" type="Math::float4"/>
            <InArg name="ProjMapUvOffsetAndScale" type="Math::float4"/>
            <InArg name="CastShadows" type="bool"/>
            <InArg name="BackLightColor" type="Math::float4"/>
            <InArg name="AmbientLightColor" type="Math::float4"/>
            <InArg name="BackLightOffset" type="float"/>
        </Message>

        <!-- create a spotlight entity -->
        <Message name="CreateSpotLightEntity" fourcc="csle" derivedFrom="CreateGraphicsEntity">
            <InArg name="LightColor" type="Math::float4"/>
            <InArg name="ProjMapUvOffsetAndScale" type="Math::float4"/>
            <InArg name="CastShadows" type="bool"/>
        </Message>
      
        <!-- create a pointlight entity-->
        <Message name="CreatePointLightEntity" fourcc="cple" derivedFrom="CreateGraphicsEntity">
            <InArg name="LightColor" type="Math::float4"/>
            <InArg name="ProjMapUvOffsetAndScale" type="Math::float4"/>
            <InArg name="CastShadows" type="bool"/>
        </Message>             
        
        <!-- a generic graphics entity message -->
        <Message name="GraphicsEntityMessage" fourcc="gemg">
            <InArg name="ObjectRef" type="Ptr<Threading::ObjectRef>"/>
        </Message>
                             
        <!-- discard a graphics entity -->
        <Message name="DiscardGraphicsEntity" fourcc="dcge" derivedFrom="GraphicsEntityMessage">
        </Message>

        <!-- add a tracked character joint -->
        <Message name="AddTrackedCharJoint" fourcc="atcj" derivedFrom="GraphicsEntityMessage">
            <InArg name="JointName" type="Util::StringAtom"/>
        </Message>
        
        <!-- update light color -->
        <Message name="SetLightColor" fourcc="slcl" derivedFrom="GraphicsEntityMessage">
            <InArg name="Color" type="Math::float4"/>
        </Message>

        <!-- update light cast shadows flag -->
        <Message name="SetLightCastShadows" fourcc="slcs" derivedFrom="GraphicsEntityMessage">
            <InArg name="CastShadows" type="bool"/>
        </Message>
        
        <!-- update global back-light color -->
        <Message name="SetGlobalBackLightColor" fourcc="sgbl" derivedFrom="GraphicsEntityMessage">
            <InArg name="Color" type="Math::float4"/>
        </Message>
        
        <!-- update global ambient color -->
        <Message name="SetGlobalAmbientLightColor" fourcc="sgal" derivedFrom="GraphicsEntityMessage">
            <InArg name="Color" type="Math::float4"/>
        </Message>
        
        <!-- update global back light offset -->
        <Message name="SetGlobalBackLightOffset" fourcc="sgbo" derivedFrom="GraphicsEntityMessage">
            <InArg name="Offset" type="float"/>
        </Message>
        
        <!-- update all global light attributes at once -->
        <Message name="SetGlobalLightParams" fourcc="sglp" derivedFrom="GraphicsEntityMessage">
            <InArg name="LightColor" type="Math::float4"/>
            <InArg name="BackLightColor" type="Math::float4"/>
            <InArg name="AmbientLightColor" type="Math::float4"/>
            <InArg name="BackLightOffset" type="float"/>
            <InArg name="CastShadows" type="bool"/>
        </Message>

        <!-- update global light colors -->
        <Message name="SetGlobalLightColor" fourcc="sglc" derivedFrom="GraphicsEntityMessage">
            <InArg name="BackLightColor" type="Math::float4"/>
            <InArg name="AmbientLightColor" type="Math::float4"/>
            <InArg name="BackLightOffset" type="Math::float4"/>
        </Message>

        <!-- update entity transform -->
        <Message name="UpdateTransform" fourcc="sttr" derivedFrom="GraphicsEntityMessage">
            <InArg name="Transform" type="Math::matrix44"/>
        </Message>
      
        <!-- set entity visibility -->
        <Message name="SetVisibility" fourcc="svsb" derivedFrom="GraphicsEntityMessage">
            <InArg name="Visible" type="bool"/>
        </Message>

        <!-- attach a camera to a view -->
        <Message name="AttachCameraToView" fourcc="actv" derivedFrom="GraphicsEntityMessage">
            <InArg name="ViewName" type="Util::StringAtom"/>
        </Message>

        <!-- remove a camera from its view -->
        <Message name="RemoveCameraFromView" fourcc="rcfv" derivedFrom="GraphicsEntityMessage">
            <InArg name="ViewName" type="Util::StringAtom"/>
        </Message>

        <!-- update shader variable instance -->
        <Message name="UpdModelNodeInstanceShaderVariable" fourcc="uisv" derivedFrom="GraphicsEntityMessage">
            <InArg name="ModelNodeInstanceName" type="Util::StringAtom"/>
            <InArg name="Semantic" type="Util::StringAtom"/>
            <InArg name="Value" type="Util::Variant"/>
        </Message>
      
        <!-- set visibility of ModelNodeInstance node -->
        <Message name="UpdModelNodeInstanceVisibility" fourcc="smsv" derivedFrom="GraphicsEntityMessage">
            <InArg name="ModelNodeInstanceName" type="Util::StringAtom"/>
            <InArg name="Visible" type="bool"/>
        </Message>   
              
        <!-- update shared shader variable -->
        <Message name="UpdateSharedShaderVariable" fourcc="ussv" >            
            <InArg name="Semantic" type="Util::StringAtom"/>
            <InArg name="Value" type="Util::Variant"/>
        </Message>
        
        <!-- play an animation clip -->
        <Message name="AnimPlayClip" fourcc="anpc" derivedFrom="GraphicsEntityMessage">
            <InArg name="ClipName" type="Util::StringAtom"/>
            <InArg name="TrackIndex" type="IndexT" default="0"/>
            <InArg name="LoopCount" type="float" default="1.0f"/>
            <InArg name="StartTime" type="Timing::Tick" default="0"/>
            <InArg name="FadeInTime" type="Timing::Tick" default="200"/>
            <InArg name="FadeOutTime" type="Timing::Tick" default="200"/>
            <InArg name="TimeOffset" type="Timing::Tick" default="0"/>
            <InArg name="TimeFactor" type="float" default="1.0f"/>
            <InArg name="BlendWeight" type="float" default="1.0f"/>
            <InArg name="ExclusiveTag" type="IndexT" default="InvalidIndex"/>
            <InArg name="EnqueueMode" type="Animation::AnimJobEnqueueMode::Code" default="Animation::AnimJobEnqueueMode::Intercept"/>
        </Message>
        
        <!-- stop an individual animation track -->
        <Message name="AnimStopTrack" fourcc="anst" derivedFrom="GraphicsEntityMessage">
            <InArg name="TrackIndex" type="IndexT" default="0"/>
            <InArg name="AllowFadeOut" type="bool" default="true"/>
        </Message>
        
        <!-- stop all animation tracks -->
        <Message name="AnimStopAllTracks" fourcc="asat" derivedFrom="GraphicsEntityMessage">
            <InArg name="AllowFadeOut" type="bool" default="true"/>
        </Message>

        <!-- modify blend weight of animations on given track -->
        <Message name="AnimModifyBlendWeight" fourcc="anmb" derivedFrom="GraphicsEntityMessage">
            <InArg name="TrackIndex" type="IndexT" default="0"/>
            <InArg name="BlendWeight" type="float" default="1.0f"/>
        </Message>

        <!-- modify time factor of animations on given track -->
        <Message name="AnimModifyTimeFactor" fourcc="anmt" derivedFrom="GraphicsEntityMessage">
            <InArg name="TrackIndex" type="IndexT" default="0"/>
            <InArg name="TimeFactor" type="float" default="1.0"/>
        </Message>
        
        <!-- test if a clip is currently playing on any track -->
        <Message name="AnimIsClipPlaying" fourcc="aisp" derivedFrom="GraphicsEntityMessage">
            <InArg name="ClipName" type="Util::StringAtom"/>
            <OutArg name="Playing" type="bool"/>
        </Message>
        
        <!-- apply character skin list -->
        <Message name="ApplySkinList" fourcc="askl" derivedFrom="GraphicsEntityMessage">
            <InArg name="SkinList" type="Util::StringAtom"/>
        </Message>
        
        <!-- show a single character skin -->
        <Message name="ShowSkin" fourcc="swsk" derivedFrom="GraphicsEntityMessage">
            <InArg name="Skin" type="Util::StringAtom"/>            
        </Message>
        
        <!-- hide a single character skin -->
        <Message name="HideSkin" fourcc="hdsk" derivedFrom="GraphicsEntityMessage">
            <InArg name="Skin" type="Util::StringAtom"/>
        </Message>
      
        <!-- set a character variation -->
        <Message name="SetVariation" fourcc="seva" derivedFrom="GraphicsEntityMessage">
            <InArg name="VariationName" type="Util::StringAtom"/>
        </Message>

        <!-- set timing factor -->
        <Message name="SetTimeFactor" fourcc="stif">
            <InArg name="Factor" type="float"/>
        </Message>

        <!-- clear attachments -->
        <Message name="UnbindAttachment" fourcc="clat">
            <InArg name="BaseEntityObjectRef"     type="Ptr<Threading::ObjectRef>"/>
            <InArg name="EntityToAttachObjectRef" type="Ptr<Threading::ObjectRef>"/>
            <InArg name="Joint"                   type="Util::StringAtom"/>
            <InArg name="ClearType"               type="InternalGraphics::AttachmentServer::ClearType" default="InternalGraphics::AttachmentServer::ClearNone"/>
        </Message>
                
        <!-- attach a new entity on an other entity -->
        <Message name="BindAttachment" fourcc="aten" derivedFrom="UnbindAttachment">
            <InArg name="KeepLocal" type="bool"/>
            <InArg name="Rotation"  type="InternalGraphics::AttachmentServer::AttachmentRotation"/>
            <InArg name="Offset"    type="Math::matrix44"/>          
        </Message>

        <!-- switch a entity to another joint -->
        <Message name="SwitchAttachmentToNewJoint" fourcc="swat" derivedFrom="BindAttachment">
            <InArg name="NewJoint" type="Util::StringAtom"/>
        </Message>

        <!-- base class of anim events -->
        <Message name="BaseAnimEventMessage" fourcc="baev" derivedFrom="GraphicsEntityMessage"/>
      
        <!-- register a new animevent handler-->
        <Message name="RegisterAnimEventHandler" fourcc="raeh">
            <InArg name="AnimEventHandler" type="Ptr<Animation::AnimEventHandlerBase>"/>
        </Message>
        
        <!-- unregister an animeventhandler by category name-->
        <Message name="UnregisterAnimEventHandler" fourcc="ureh">
            <InArg name="CategoryName" type="Util::StringAtom"/>
        </Message>

        <!-- preload mouse pointer textures -->
        <Message name="PreloadMousePointerTextures" fourcc="plpt">
            <InArg name="ResourceIds" type="Util::Array<Resources::ResourceId>"/>           
        </Message>
        
        <!-- update mouse pointer(s) -->
        <Message name="UpdateMousePointers" fourcc="unpt">
            <InArg name="Pointers" type="Util::Array<CoreGraphics::MousePointer>"/>
        </Message>

        <!-- hold shared resources, increments its use count, so its not unloaded automatically  -->
        <Message name="HoldSharedResources" fourcc="hore"/>        
        
        <!-- release shared resources, decrements its use count and deletes it if no one uses it anymore (UnregisterResource)-->
        <Message name="ReleaseSharedResources" fourcc="rlre"/>

        <!-- set the animator nodes frame, and stop animation at this frame-->
        <Message name="SetAnimatorTime" fourcc="safr" derivedFrom="GraphicsEntityMessage">
            <InArg name="NodeInstanceName" type="Util::StringAtom"/>
            <InArg name="Time" type="Timing::Time"/>
        </Message>

       <!-- update a CameraEntity with perspective fov -->
        <Message name="UpdateCameraEntity" fourcc="upce" derivedFrom="GraphicsEntityMessage">
            <InArg name="CameraSettings" type="Shared::CameraSettings"/>
        </Message>
      
        <!-- set point of interest for shadow castzing lightsw-->
        <Message name="SetShadowPointOfInterest" fourcc="sspo" >
            <InArg name="Poi" type="Math::point"/>          
        </Message>
      
      </Protocol>    
</Nebula3>
